### YamlMime:TSType
name: AppConfigurationClient
uid: '@azure/app-configuration - v1.3.1.AppConfigurationClient'
package: '@azure/app-configuration - v1.3.1'
summary: Client for the Azure App Configuration service.
fullName: AppConfigurationClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: 'AppConfigurationClient(string, AppConfigurationClientOptions)'
    uid: '@azure/app-configuration - v1.3.1.AppConfigurationClient.constructor'
    package: '@azure/app-configuration - v1.3.1'
    summary: Initializes a new instance of the AppConfigurationClient class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new AppConfigurationClient(connectionString: string, options?:
        AppConfigurationClientOptions)
      parameters:
        - id: connectionString
          type: string
          description: Connection string needed for a client to connect to Azure.
        - id: options
          type: >-
            @azure/app-configuration - <xref
            uid="v1.3.1.AppConfigurationClientOptions" />
          description: |
            Options for the AppConfigurationClient.
  - name: >-
      AppConfigurationClient(string, TokenCredential,
      AppConfigurationClientOptions)
    uid: '@azure/app-configuration - v1.3.1.AppConfigurationClient.constructor_1'
    package: '@azure/app-configuration - v1.3.1'
    summary: |-
      Initializes a new instance of the AppConfigurationClient class using
      a TokenCredential.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new AppConfigurationClient(endpoint: string, tokenCredential:
        TokenCredential, options?: AppConfigurationClientOptions)
      parameters:
        - id: endpoint
          type: string
          description: >-
            The endpoint of the App Configuration service (ex:
            https://sample.azconfig.io).
        - id: tokenCredential
          type: TokenCredential
          description: >-
            An object that implements the `TokenCredential` interface used to
            authenticate requests to the service. Use the \@azure/identity
            package to create a credential that suits your needs.
        - id: options
          type: >-
            @azure/app-configuration - <xref
            uid="v1.3.1.AppConfigurationClientOptions" />
          description: |
            Options for the AppConfigurationClient.
methods:
  - name: >-
      addConfigurationSetting(AddConfigurationSettingParam |
      AddConfigurationSettingParam<FeatureFlagValue> |
      AddConfigurationSettingParam<SecretReferenceValue>,
      AddConfigurationSettingOptions)
    uid: >-
      @azure/app-configuration -
      v1.3.1.AppConfigurationClient.addConfigurationSetting
    package: '@azure/app-configuration - v1.3.1'
    summary: >-
      Add a setting into the Azure App Configuration service, failing if it

      already exists.

      Example usage:

      ```ts

      const result = await client.addConfigurationSetting({ key: "MyKey", label:
      "MyLabel", value: "MyValue" });

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addConfigurationSetting(configurationSetting:
        AddConfigurationSettingParam |
        AddConfigurationSettingParam<FeatureFlagValue> |
        AddConfigurationSettingParam<SecretReferenceValue>, options?:
        AddConfigurationSettingOptions):
        Promise<AddConfigurationSettingResponse>
      parameters:
        - id: configurationSetting
          type: >-
            @azure/app-configuration - <xref
            uid="v1.3.1.AddConfigurationSettingParam" /> |
            @azure/app-configuration - <xref
            uid="v1.3.1.AddConfigurationSettingParam"
            />&lt;@azure/app-configuration - <xref uid="v1.3.1.FeatureFlagValue"
            />&gt; | @azure/app-configuration - <xref
            uid="v1.3.1.AddConfigurationSettingParam"
            />&lt;@azure/app-configuration - <xref
            uid="v1.3.1.SecretReferenceValue" />&gt;
          description: A configuration setting.
        - id: options
          type: >-
            @azure/app-configuration - <xref
            uid="v1.3.1.AddConfigurationSettingOptions" />
          description: |
            Optional parameters for the request.
      return:
        description: ''
        type: >-
          Promise&lt;@azure/app-configuration - <xref
          uid="v1.3.1.AddConfigurationSettingResponse" />&gt;
  - name: >-
      deleteConfigurationSetting(ConfigurationSettingId,
      DeleteConfigurationSettingOptions)
    uid: >-
      @azure/app-configuration -
      v1.3.1.AppConfigurationClient.deleteConfigurationSetting
    package: '@azure/app-configuration - v1.3.1'
    summary: >-
      Delete a setting from the Azure App Configuration service

      Example usage:

      ```ts

      const deletedSetting = await client.deleteConfigurationSetting({ key:
      "MyKey", label: "MyLabel" });

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteConfigurationSetting(id: ConfigurationSettingId,
        options?: DeleteConfigurationSettingOptions):
        Promise<DeleteConfigurationSettingResponse>
      parameters:
        - id: id
          type: >-
            @azure/app-configuration - <xref uid="v1.3.1.ConfigurationSettingId"
            />
          description: The id of the configuration setting to delete.
        - id: options
          type: >-
            @azure/app-configuration - <xref
            uid="v1.3.1.DeleteConfigurationSettingOptions" />
          description: |
            Optional parameters for the request (ex: etag, label)
      return:
        description: ''
        type: >-
          Promise&lt;@azure/app-configuration - <xref
          uid="v1.3.1.DeleteConfigurationSettingResponse" />&gt;
  - name: >-
      getConfigurationSetting(ConfigurationSettingId,
      GetConfigurationSettingOptions)
    uid: >-
      @azure/app-configuration -
      v1.3.1.AppConfigurationClient.getConfigurationSetting
    package: '@azure/app-configuration - v1.3.1'
    summary: >-
      Gets a setting from the Azure App Configuration service.

      Example code:

      ```ts

      const setting = await client.getConfigurationSetting({ key: "MyKey",
      label: "MyLabel" });

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getConfigurationSetting(id: ConfigurationSettingId, options?:
        GetConfigurationSettingOptions):
        Promise<GetConfigurationSettingResponse>
      parameters:
        - id: id
          type: >-
            @azure/app-configuration - <xref uid="v1.3.1.ConfigurationSettingId"
            />
          description: The id of the configuration setting to get.
        - id: options
          type: >-
            @azure/app-configuration - <xref
            uid="v1.3.1.GetConfigurationSettingOptions" />
          description: |
            Optional parameters for the request.
      return:
        description: ''
        type: >-
          Promise&lt;@azure/app-configuration - <xref
          uid="v1.3.1.GetConfigurationSettingResponse" />&gt;
  - name: listConfigurationSettings(ListConfigurationSettingsOptions)
    uid: >-
      @azure/app-configuration -
      v1.3.1.AppConfigurationClient.listConfigurationSettings
    package: '@azure/app-configuration - v1.3.1'
    summary: >-
      Lists settings from the Azure App Configuration service, optionally

      filtered by key names, labels and accept datetime.

      Example code:

      ```ts

      const allSettingsWithLabel = client.listConfigurationSettings({
      labelFilter: "MyLabel" });

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listConfigurationSettings(options?:
        ListConfigurationSettingsOptions):
        PagedAsyncIterableIterator<ConfigurationSetting,
        ListConfigurationSettingPage, PageSettings>
      parameters:
        - id: options
          type: >-
            @azure/app-configuration - <xref
            uid="v1.3.1.ListConfigurationSettingsOptions" />
          description: |
            Optional parameters for the request.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;@azure/app-configuration - <xref
          uid="v1.3.1.ConfigurationSetting" />, @azure/app-configuration - <xref
          uid="v1.3.1.ListConfigurationSettingPage" />, @azure/app-configuration
          - <xref uid="v1.3.1.PageSettings" />&gt;
  - name: listRevisions(ListRevisionsOptions)
    uid: '@azure/app-configuration - v1.3.1.AppConfigurationClient.listRevisions'
    package: '@azure/app-configuration - v1.3.1'
    summary: |-
      Lists revisions of a set of keys, optionally filtered by key names,
      labels and accept datetime.
      Example code:
      ```ts
      const revisionsIterator = client.listRevisions({ keys: ["MyKey"] });
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listRevisions(options?: ListRevisionsOptions):
        PagedAsyncIterableIterator<ConfigurationSetting, ListRevisionsPage,
        PageSettings>
      parameters:
        - id: options
          type: >-
            @azure/app-configuration - <xref uid="v1.3.1.ListRevisionsOptions"
            />
          description: |
            Optional parameters for the request.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;@azure/app-configuration - <xref
          uid="v1.3.1.ConfigurationSetting" />, @azure/app-configuration - <xref
          uid="v1.3.1.ListRevisionsPage" />, @azure/app-configuration - <xref
          uid="v1.3.1.PageSettings" />&gt;
  - name: >-
      setConfigurationSetting(SetConfigurationSettingParam |
      SetConfigurationSettingParam<FeatureFlagValue> |
      SetConfigurationSettingParam<SecretReferenceValue>,
      SetConfigurationSettingOptions)
    uid: >-
      @azure/app-configuration -
      v1.3.1.AppConfigurationClient.setConfigurationSetting
    package: '@azure/app-configuration - v1.3.1'
    summary: >-
      Sets the value of a key in the Azure App Configuration service, allowing
      for an optional etag.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setConfigurationSetting(configurationSetting:
        SetConfigurationSettingParam |
        SetConfigurationSettingParam<FeatureFlagValue> |
        SetConfigurationSettingParam<SecretReferenceValue>, options?:
        SetConfigurationSettingOptions):
        Promise<SetConfigurationSettingResponse>
      parameters:
        - id: configurationSetting
          type: >-
            @azure/app-configuration - <xref
            uid="v1.3.1.SetConfigurationSettingParam" /> |
            @azure/app-configuration - <xref
            uid="v1.3.1.SetConfigurationSettingParam"
            />&lt;@azure/app-configuration - <xref uid="v1.3.1.FeatureFlagValue"
            />&gt; | @azure/app-configuration - <xref
            uid="v1.3.1.SetConfigurationSettingParam"
            />&lt;@azure/app-configuration - <xref
            uid="v1.3.1.SecretReferenceValue" />&gt;
          description: A configuration value.
        - id: options
          type: >-
            @azure/app-configuration - <xref
            uid="v1.3.1.SetConfigurationSettingOptions" />
          description: >
            Optional parameters for the request.


            Example code:

            ```ts

            await client.setConfigurationSetting({ key: "MyKey", value:
            "MyValue" });

            ```
      return:
        description: ''
        type: >-
          Promise&lt;@azure/app-configuration - <xref
          uid="v1.3.1.SetConfigurationSettingResponse" />&gt;
  - name: 'setReadOnly(ConfigurationSettingId, boolean, SetReadOnlyOptions)'
    uid: '@azure/app-configuration - v1.3.1.AppConfigurationClient.setReadOnly'
    package: '@azure/app-configuration - v1.3.1'
    summary: Sets or clears a key's read-only status.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setReadOnly(id: ConfigurationSettingId, readOnly: boolean,
        options?: SetReadOnlyOptions): Promise<SetReadOnlyResponse>
      parameters:
        - id: id
          type: >-
            @azure/app-configuration - <xref uid="v1.3.1.ConfigurationSettingId"
            />
          description: |
            The id of the configuration setting to modify.
        - id: readOnly
          type: boolean
          description: ''
        - id: options
          type: '@azure/app-configuration - <xref uid="v1.3.1.SetReadOnlyOptions" />'
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;@azure/app-configuration - <xref
          uid="v1.3.1.SetReadOnlyResponse" />&gt;
  - name: updateSyncToken(string)
    uid: '@azure/app-configuration - v1.3.1.AppConfigurationClient.updateSyncToken'
    package: '@azure/app-configuration - v1.3.1'
    summary: >-
      Adds an external synchronization token to ensure service requests receive
      up-to-date values.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function updateSyncToken(syncToken: string)'
      parameters:
        - id: syncToken
          type: string
          description: |
            The synchronization token value.
